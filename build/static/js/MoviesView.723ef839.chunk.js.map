{"version":3,"sources":["services/movie-api.js","services/Status.js","Components/Searchbar/Searchbar.module.css","views/MoviesView.module.css","Components/Searchbar/Searchbar.jsx","views/MoviesView.js"],"names":["BASE_URL","AUTH_KEY","fetchMovies","a","url","fetch","response","ok","json","Promise","reject","Error","fetchPopularMovies","fetchMoviesByQuery","movieQuery","fetchMovieDetails","movieId","fetchMovieCast","fetchMovieReviews","Status","IDLE","PENDING","RESOLVED","REJECTED","module","exports","Searchbar","onSearchbarSubmit","useState","searchQuery","setSearchQuery","className","styles","onSubmit","e","preventDefault","trim","toLowerCase","toast","SearchForm","type","SearchFormButton","SearchFormButtonLabel","SearchFormInput","value","autoComplete","autoFocus","placeholder","onChange","currentTarget","MoviesView","history","useHistory","location","useLocation","URLSearchParams","search","get","setMovieQuery","movies","setMovies","status","setStatus","error","setError","useEffect","moviesAPI","then","results","catch","data","push","autoClose","position","s","list","map","movie","item","title","to","pathname","id","state","from"],"mappings":"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","file":"static/js/MoviesView.723ef839.chunk.js","sourcesContent":["const BASE_URL = 'https://api.themoviedb.org/3';\r\nconst AUTH_KEY = 'd66f8875c56322c0e6582f80570eea14';\r\nasync function fetchMovies(url = '') {\r\n  const response = await fetch(url);\r\n  return response.ok\r\n    ? await response.json()\r\n    : Promise.reject(new Error('Not found'));\r\n}\r\nexport function fetchPopularMovies() {\r\n  return fetchMovies(`${BASE_URL}/trending/all/day?api_key=${AUTH_KEY}`);\r\n}\r\nexport function fetchMoviesByQuery(movieQuery) {\r\n  return fetchMovies(\r\n    `${BASE_URL}/search/movie?api_key=${AUTH_KEY}&query=${movieQuery}`,\r\n  );\r\n}\r\nexport function fetchMovieDetails(movieId) {\r\n  return fetchMovies(`${BASE_URL}/movie/${movieId}?api_key=${AUTH_KEY}`);\r\n}\r\nexport function fetchMovieCast(movieId) {\r\n  return fetchMovies(\r\n    `${BASE_URL}/movie/${movieId}/credits?api_key=${AUTH_KEY}`,\r\n  );\r\n}\r\nexport function fetchMovieReviews(movieId) {\r\n  return fetchMovies(\r\n    `${BASE_URL}/movie/${movieId}/reviews?api_key=${AUTH_KEY}`,\r\n  );\r\n}\r\n","const Status = {\r\n  IDLE: 'idle',\r\n  PENDING: 'pending',\r\n  RESOLVED: 'resolved',\r\n  REJECTED: 'rejected',\r\n};\r\nexport default Status;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Searchbar\":\"Searchbar_Searchbar__28z4-\",\"ImageGallery\":\"Searchbar_ImageGallery__2Ieky\",\"ImageGalleryItem\":\"Searchbar_ImageGalleryItem__35Tqm\",\"ImageGalleryItem_Image\":\"Searchbar_ImageGalleryItem_Image__2cM2l\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"MoviesView_list__1qEQb\",\"item\":\"MoviesView_item__3O6Sj\",\"title\":\"MoviesView_title__2hfYe\"};","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nimport styles from './Searchbar.module.css';\r\nexport default function Searchbar({ onSearchbarSubmit }) {\r\n  const [searchQuery, setSearchQuery] = useState('');\r\n  const onQueryChange = e => {\r\n    setSearchQuery(e.currentTarget.value);\r\n  };\r\n  const onSubmit = e => {\r\n    e.preventDefault();\r\n    if (searchQuery.trim() === '') {\r\n      toast('Type something to find.');\r\n      return;\r\n    }\r\n    onSearchbarSubmit(searchQuery.toLowerCase());\r\n    setSearchQuery('');\r\n  };\r\n  return (\r\n    <header className={styles.Searchbar}>\r\n      <form onSubmit={onSubmit} className={styles.SearchForm}>\r\n        <button type=\"submit\" className={styles.SearchFormButton}>\r\n          <span className={styles.SearchFormButtonLabel}>Search</span>\r\n        </button>\r\n        <input\r\n          className={styles.SearchFormInput}\r\n          value={searchQuery}\r\n          type=\"text\"\r\n          autoComplete=\"off\"\r\n          autoFocus\r\n          placeholder=\"Search movies\"\r\n          onChange={onQueryChange}\r\n        />\r\n      </form>\r\n    </header>\r\n  );\r\n}\r\n\r\nSearchbar.propTypes = {\r\n  onFormSubmit: PropTypes.func,\r\n};\r\n","import { useState, useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { ToastContainer } from 'react-toastify';\r\nimport { useLocation, useHistory } from 'react-router-dom';\r\n\r\nimport * as moviesAPI from '../services/movie-api';\r\nimport Searchbar from '../Components/Searchbar';\r\nimport Status from '../services/Status';\r\nimport s from '../views/MoviesView.module.css';\r\n\r\nexport default function MoviesView() {\r\n  const history = useHistory();\r\n  const location = useLocation();\r\n\r\n  const [movieQuery, setMovieQuery] = useState(\r\n    new URLSearchParams(location.search).get('query') ?? '',\r\n  );\r\n  const [movies, setMovies] = useState([]);\r\n  const [status, setStatus] = useState(Status.IDLE);\r\n  const [error, setError] = useState('');\r\n\r\n  const onSearchbarSubmit = data => {\r\n    history.push({ ...location, search: `query=${data}` });\r\n    setMovieQuery(data);\r\n  };\r\n  useEffect(() => {\r\n    if (movieQuery === '') {\r\n      return;\r\n    }\r\n    setStatus(Status.PENDING);\r\n    moviesAPI\r\n      .fetchMoviesByQuery(movieQuery)\r\n      .then(({ results }) => {\r\n        setMovies(results);\r\n        setStatus(Status.RESOLVED);\r\n      })\r\n      .catch(error => {\r\n        setError(error);\r\n        setStatus(Status.REJECTED);\r\n      });\r\n  }, [movieQuery]);\r\n  return (\r\n    <>\r\n      <Searchbar onSearchbarSubmit={onSearchbarSubmit} />\r\n      <ToastContainer autoClose={3000} position=\"top-center\" />\r\n\r\n      {status === Status.PENDING && <p>Download movie collection</p>}\r\n      {status === Status.REJECTED && <p>{error}</p>}\r\n\r\n      {status === Status.RESOLVED && (\r\n        <ul className={s.list}>\r\n          {movies.map(movie => (\r\n            <li key={movie.id} className={s.item}>\r\n              <Link\r\n                className={s.title}\r\n                to={{\r\n                  pathname: `/movies/${movie.id}`,\r\n                  state: { from: location },\r\n                }}\r\n              >\r\n                {movie.title}\r\n              </Link>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n"],"sourceRoot":""}