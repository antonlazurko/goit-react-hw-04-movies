{"version":3,"sources":["views/Cast.tsx","views/Cast.module.css"],"names":["Cast","movieId","useState","cast","setCast","Status","IDLE","status","setStatus","error","setError","console","log","useEffect","PENDING","moviesAPI","then","RESOLVED","catch","REJECTED","className","s","list","length","map","artist","item","name","nameDescr","character","profile_path","image","src","alt","id","module","exports"],"mappings":"qOAYe,SAASA,EAAT,GAAsC,IAAtBC,EAAqB,EAArBA,QAAqB,EAC1BC,mBAAS,IADiB,mBAC3CC,EAD2C,KACrCC,EADqC,OAEtBF,mBAASG,IAAOC,MAFM,mBAE3CC,EAF2C,KAEnCC,EAFmC,OAGxBN,mBAAS,IAHe,mBAG3CO,EAH2C,KAGpCC,EAHoC,KAmBlD,OAfAC,QAAQC,IAAIT,GAEZU,qBAAU,WACRL,EAAUH,IAAOS,SACjBC,IACkBd,GACfe,MAAK,YAAe,IAAZb,EAAW,EAAXA,KACPC,EAAQD,GACRK,EAAUH,IAAOY,aAElBC,OAAM,SAACT,GACNC,EAASD,GACTD,EAAUH,IAAOc,eAEpB,CAAClB,IAEF,qCACGM,IAAWF,IAAOS,SAAW,8CAC7BP,IAAWF,IAAOc,UAAY,4BAAIV,IAClCF,IAAWF,IAAOY,UACjB,qBAAIG,UAAWC,IAAEC,KAAjB,UACmB,IAAhBnB,EAAKoB,QAAgB,oDACrBpB,EAAKqB,KAAI,SAACC,GAAD,OACR,qBAAoBL,UAAWC,IAAEK,KAAjC,UACE,sBAAKN,UAAWC,IAAEM,KAAlB,UACE,sBAAMP,UAAWC,IAAEO,UAAnB,SAA+BH,EAAOE,OACtC,sBAAMP,UAAWC,IAAEO,UAAnB,oBACA,sBAAMR,UAAWC,IAAEO,UAAnB,SAA+BH,EAAOI,eAEvCJ,EAAOK,cACN,qBACEV,UAAWC,IAAEU,MACbC,IAAG,0CAAqCP,EAAOK,cAC/CG,IAAKR,EAAOE,SAVTF,EAAOS,e,oBCtC5BC,EAAOC,QAAU,CAAC,KAAO,mBAAmB,KAAO,mBAAmB,MAAQ,oBAAoB,KAAO,mBAAmB,UAAY","file":"static/js/Cast.eb1a8b1c.chunk.js","sourcesContent":["import { useState, useEffect } from \"react\";\r\n\r\nimport * as moviesAPI from \"../services/movie-api\";\r\nimport Status from \"../services/Status\";\r\nimport s from \"../views/Cast.module.css\";\r\ntype TMovieId = { movieId: string };\r\ninterface IArtist {\r\n  id: string;\r\n  profile_path: string;\r\n  name: string;\r\n  character: string;\r\n}\r\nexport default function Cast({ movieId }: TMovieId) {\r\n  const [cast, setCast] = useState([]);\r\n  const [status, setStatus] = useState(Status.IDLE);\r\n  const [error, setError] = useState(\"\");\r\n  console.log(cast);\r\n\r\n  useEffect(() => {\r\n    setStatus(Status.PENDING);\r\n    moviesAPI\r\n      .fetchMovieCast(movieId)\r\n      .then(({ cast }) => {\r\n        setCast(cast);\r\n        setStatus(Status.RESOLVED);\r\n      })\r\n      .catch((error) => {\r\n        setError(error);\r\n        setStatus(Status.REJECTED);\r\n      });\r\n  }, [movieId]);\r\n  return (\r\n    <>\r\n      {status === Status.PENDING && <p>Download cast</p>}\r\n      {status === Status.REJECTED && <p>{error}</p>}\r\n      {status === Status.RESOLVED && (\r\n        <ul className={s.list}>\r\n          {cast.length === 0 && <p>No cast information</p>}\r\n          {cast.map((artist: IArtist) => (\r\n            <li key={artist.id} className={s.item}>\r\n              <div className={s.name}>\r\n                <span className={s.nameDescr}>{artist.name}</span>\r\n                <span className={s.nameDescr}>played</span>\r\n                <span className={s.nameDescr}>{artist.character}</span>\r\n              </div>\r\n              {artist.profile_path && (\r\n                <img\r\n                  className={s.image}\r\n                  src={`https://image.tmdb.org/t/p/w200/${artist.profile_path}`}\r\n                  alt={artist.name}\r\n                />\r\n              )}\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"Cast_list__ySYIN\",\"item\":\"Cast_item__1PqOc\",\"image\":\"Cast_image__2VgHO\",\"name\":\"Cast_name__1DZho\",\"nameDescr\":\"Cast_nameDescr__2F1ls\"};"],"sourceRoot":""}