{"version":3,"sources":["services/movie-api.tsx","services/Status.tsx","views/MovieDetailsPage.module.css","views/MovieDetailsPage.tsx"],"names":["BASE_URL","AUTH_KEY","fetchMovies","a","url","fetch","response","ok","json","Promise","reject","Error","fetchPopularMovies","fetchMoviesByQuery","movieQuery","queryPage","fetchMovieDetails","movieId","fetchMovieCast","fetchMovieReviews","Status","IDLE","PENDING","RESOLVED","REJECTED","module","exports","initialState","id","name","title","poster_path","release_date","overview","NotFoundView","lazy","Cast","Reviews","MovieDetailsPage","useContext","FirebaseContext","firestore","auth","useState","movie","setMovie","status","setStatus","error","setError","useAuthState","user","useCollectionData","collection","displayName","snapshotListenOptions","includeMetadataChanges","favoriteMovies","useParams","isMovieInCollection","find","useRouteMatch","path","history","useHistory","location","useLocation","useEffect","moviesAPI","then","catch","fixed","className","s","buttonsArea","aria-label","onClick","state","from","push","fontSize","disabled","doc","set","console","log","movieCard","poster","image","src","alt","descr","reliese","text","to","pathname","fallback"],"mappings":"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","file":"static/js/MovieDetailsPage.a452ea40.chunk.js","sourcesContent":["const BASE_URL = 'https://api.themoviedb.org/3';\r\nconst AUTH_KEY = 'd66f8875c56322c0e6582f80570eea14';\r\ntype TMovie = { id: string, name: string, title: string,poster_path:string,release_date:string }\r\n\r\ntype TFetchMoviesByQuery = (movieQuery: string, queryPage: number)=>Promise<{results:TMovie[]}>;\r\nasync function fetchMovies(url = '') {\r\n  const response = await fetch(url);\r\n  return response.ok\r\n    ? await response.json()\r\n    : Promise.reject(new Error('Not found'));\r\n}\r\nexport function fetchPopularMovies() {\r\n  return fetchMovies(`${BASE_URL}/trending/all/day?api_key=${AUTH_KEY}`);\r\n}\r\nexport const fetchMoviesByQuery:TFetchMoviesByQuery=(movieQuery, queryPage)=> {\r\n   return fetchMovies(\r\n    `${BASE_URL}/search/movie?api_key=${AUTH_KEY}&query=${movieQuery}&page=${queryPage}`,\r\n  );\r\n}\r\nexport function fetchMovieDetails(movieId:string) {\r\n  return fetchMovies(`${BASE_URL}/movie/${movieId}?api_key=${AUTH_KEY}`);\r\n}\r\nexport function fetchMovieCast(movieId:string) {\r\n  return fetchMovies(\r\n    `${BASE_URL}/movie/${movieId}/credits?api_key=${AUTH_KEY}`,\r\n  );\r\n}\r\nexport function fetchMovieReviews(movieId:string) {\r\n  return fetchMovies(\r\n    `${BASE_URL}/movie/${movieId}/reviews?api_key=${AUTH_KEY}`,\r\n  );\r\n}\r\n","const Status = {\r\n  IDLE: 'idle',\r\n  PENDING: 'pending',\r\n  RESOLVED: 'resolved',\r\n  REJECTED: 'rejected',\r\n};\r\nexport default Status;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"movieCard\":\"MovieDetailsPage_movieCard__3n0Mm\",\"reliese\":\"MovieDetailsPage_reliese__1s9qq\",\"poster\":\"MovieDetailsPage_poster__22liw\",\"descr\":\"MovieDetailsPage_descr__3LmSN\",\"text\":\"MovieDetailsPage_text__2r0lZ\",\"image\":\"MovieDetailsPage_image__CWh_l\",\"Cast\":\"MovieDetailsPage_Cast__L5JPT\",\"Reviews\":\"MovieDetailsPage_Reviews__Xo9M3\",\"buttonsArea\":\"MovieDetailsPage_buttonsArea__LmNys\"};","import { useState, useEffect, lazy, Suspense, useContext } from \"react\";\r\nimport { useCollectionData } from \"react-firebase-hooks/firestore\";\r\nimport { Route, useParams, useLocation, useHistory } from \"react-router-dom\";\r\nimport { NavLink, useRouteMatch } from \"react-router-dom\";\r\nimport * as moviesAPI from \"../services/movie-api\";\r\nimport AddToPhotosIcon from \"@material-ui/icons/AddToPhotos\";\r\nimport ArrowBackIosIcon from \"@material-ui/icons/ArrowBackIos\";\r\nimport { FirebaseContext } from \"../index\";\r\nimport { useAuthState } from \"react-firebase-hooks/auth\";\r\n\r\nimport Status from \"../services/Status\";\r\nimport s from \"../views/MovieDetailsPage.module.css\";\r\nimport { TParams, LocationState } from \"../types\";\r\nimport { Button, Container } from \"@material-ui/core\";\r\n\r\nconst initialState = {\r\n  id: \"string\",\r\n  name: \"string\",\r\n  title: \"string\",\r\n  poster_path: \"string\",\r\n  release_date: \"string\",\r\n  overview: \"string\",\r\n};\r\n\r\nconst NotFoundView = lazy(\r\n  () => import(\"../views/NotFoundView\" /*webpackChunkName: \"NotFoundView\" */)\r\n);\r\nconst Cast = lazy(() => import(\"./Cast\" /*webpackChunkName: \"Cast\" */));\r\nconst Reviews = lazy(\r\n  () => import(\"./Reviews\" /*webpackChunkName: \"Reviews\" */)\r\n);\r\nexport default function MovieDetailsPage() {\r\n  const { firestore, auth } = useContext(FirebaseContext);\r\n  const [movie, setMovie] = useState<typeof initialState>(initialState);\r\n  const [status, setStatus] = useState(Status.IDLE);\r\n  const [error, setError] = useState(\"\");\r\n  const [user] = useAuthState(auth);\r\n  const [favoriteMovies] = useCollectionData(\r\n    firestore?.collection(`${user?.displayName}`),\r\n    {\r\n      snapshotListenOptions: { includeMetadataChanges: true },\r\n    }\r\n  );\r\n\r\n  const { movieId } = useParams<TParams>();\r\n  const isMovieInCollection = favoriteMovies?.find(\r\n    (movie) => movie.movieId === `${movieId}`\r\n  );\r\n  const { url, path } = useRouteMatch();\r\n\r\n  const history = useHistory();\r\n  const location = useLocation<LocationState>();\r\n\r\n  const handleGoBack = () => {\r\n    location?.state?.from\r\n      ? history.push(location.state.from)\r\n      : history.push((location.state.from = \"/movies\"));\r\n  };\r\n  const handleAddToFavorite = () => {\r\n    firestore\r\n      ?.collection(`${user?.displayName}`)\r\n      .doc(`movieId${movieId}`)\r\n      .set({ movieId })\r\n      .then(() => {\r\n        console.log(\"Document successfully written!\");\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Error writing document: \", error);\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    setStatus(Status.PENDING);\r\n    moviesAPI\r\n      .fetchMovieDetails(movieId)\r\n      .then((movie) => {\r\n        setMovie(movie);\r\n        setStatus(Status.RESOLVED);\r\n      })\r\n      .catch((Error) => {\r\n        setError(Error);\r\n        setStatus(Status.REJECTED);\r\n      });\r\n  }, [movieId]);\r\n  return (\r\n    <>\r\n      {status === Status.PENDING && <p>Download movie</p>}\r\n      {status === Status.REJECTED && <NotFoundView error={error} />}\r\n      {status === Status.RESOLVED && (\r\n        <Container fixed>\r\n          <div className={s.buttonsArea}>\r\n            <Button aria-label=\"delete\" onClick={handleGoBack}>\r\n              <ArrowBackIosIcon fontSize=\"small\" />\r\n              Back\r\n            </Button>\r\n            <Button\r\n              disabled={!user || !!isMovieInCollection}\r\n              aria-label=\"delete\"\r\n              onClick={handleAddToFavorite}\r\n            >\r\n              <AddToPhotosIcon fontSize=\"small\" />\r\n              {!user\r\n                ? \" Login to enable adding\"\r\n                : !!isMovieInCollection\r\n                ? \" Movie already exist\"\r\n                : \" Add to favorites\"}\r\n            </Button>\r\n          </div>\r\n          <h2>{movie.title}</h2>\r\n          <div className={s.movieCard}>\r\n            <div className={s.poster}>\r\n              {movie.poster_path && (\r\n                <img\r\n                  className={s.image}\r\n                  src={`https://image.tmdb.org/t/p/w500/${movie.poster_path}`}\r\n                  alt={movie.title}\r\n                />\r\n              )}\r\n            </div>\r\n            <div className={s.descr}>\r\n              <div className={s.reliese}>\r\n                Release date: {movie.release_date}\r\n              </div>\r\n              <div className={s.text}>{movie.overview}</div>\r\n            </div>\r\n          </div>\r\n          <div>\r\n            <NavLink\r\n              to={{\r\n                pathname: `${url}/Cast`,\r\n                state: { from: location },\r\n              }}\r\n              className={s.Cast}\r\n            >\r\n              Cast of \"{movie.title}\" movie\r\n            </NavLink>\r\n            <NavLink\r\n              to={{\r\n                pathname: `${url}/Reviews`,\r\n                state: { from: location },\r\n              }}\r\n              className={s.Reviews}\r\n            >\r\n              Reviews of \"{movie.title}\" movie\r\n            </NavLink>\r\n            <hr />\r\n            <Suspense fallback={<div>Downloading...</div>}>\r\n              <Route path={`${path}/Cast`}>\r\n                <Cast movieId={movieId} />\r\n              </Route>\r\n              <Route path={`${path}/Reviews`}>\r\n                <Reviews movieId={movieId} />\r\n              </Route>\r\n            </Suspense>\r\n          </div>\r\n        </Container>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n"],"sourceRoot":""}